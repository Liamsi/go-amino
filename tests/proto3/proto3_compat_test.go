// +build extensive_tests

// only built if manually enforced
package proto3

import (
	"testing"

	"github.com/golang/protobuf/proto"
	pbf "github.com/golang/protobuf/proto/proto3_proto"
	"github.com/stretchr/testify/assert"
	"github.com/tendermint/go-amino"
	p3 "github.com/tendermint/go-amino/tests/proto3/proto"
)

// This file checks basic proto3 compatibility by checking encoding of some test-vectors generated by

// TODO(ismail): add a semi-automatic way to test for (more or less full) compatibility to proto3, ideally,
// using their .proto test files: https://github.com/golang/protobuf/tree/master/proto

// List of differences:
// panic: floating point types are unsafe for go-amino

func TestEncodeAminoDecodeProto(t *testing.T) {
	cdc := amino.NewCodec()
	// we have to define our own struct for amino enc because the proto3 test files contains floating types
	type Msg struct {
		Name     string
		Hilarity pbf.Message_Humour
	}
	m := pbf.Message{Name: "Cosmos"}
	ab, err := cdc.MarshalBinaryBare(Msg{Name: "Cosmos"})
	assert.NoError(t, err, "unexpected error")

	pb, err := proto.Marshal(&m)
	assert.NoError(t, err, "unexpected error")
	// This works:
	assert.Equal(t, pb, ab, "encoding doesn't match")

	m = pbf.Message{Name: "Cosmos", Hilarity: pbf.Message_PUNS}
	ab, err = cdc.MarshalBinaryBare(Msg{Name: "Cosmos", Hilarity: pbf.Message_PUNS})
	assert.NoError(t, err, "unexpected error")

	pb, err = proto.Marshal(&m)
	assert.NoError(t, err, "unexpected error")

	// This does not work (same if we drop Name and only have the int32 field):
	//assert.Equal(t, pb, ab, "encoding doesn't match")

	m2 := pbf.Nested{Bunny: "foo", Cute: true}
	ab, err = cdc.MarshalBinaryBare(m2)
	assert.NoError(t, err, "unexpected error")

	pb, err = proto.Marshal(&m2)
	assert.NoError(t, err, "unexpected error")
	assert.Equal(t, pb, ab, "encoding doesn't match")

	ab, err = cdc.MarshalBinaryBare(p3.Test32{Foo: 42, Bar: 42})
	assert.NoError(t, err, "unexpected error")
	pb, err = proto.Marshal(&p3.Test32{Foo: 42, Bar: 42})
	assert.NoError(t, err, "unexpected error")
	assert.Equal(t, pb, ab, "encoding doesn't match")
}
